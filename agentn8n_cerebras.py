import asyncio
import logging
import os
import aiohttp
import json
from dotenv import load_dotenv
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    WorkerOptions,
    cli,
    function_tool,
)
from livekit.plugins import openai, silero

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ email
from aitools import search_web, send_email

# -------------------- Setup --------------------
load_dotenv()

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö LiveKit
logger = logging.getLogger("n8n-assistant")
logger.setLevel(logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler("agent_n8n.log", encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
openai_api_key = os.getenv("OPENAI_API_KEY")
cerebras_api_key = os.getenv("CEREBRAS_API_KEY")

if not openai_api_key:
    logger.error("OPENAI_API_KEY not found in environment variables")
    raise ValueError("OPENAI_API_KEY is required")

if not cerebras_api_key:
    logger.error("CEREBRAS_API_KEY not found in environment variables")
    raise ValueError("CEREBRAS_API_KEY is required")

# -------------------- n8n Integration --------------------
N8N_WEATHER_URL = "https://auto2025system.duckdns.org/webhook/smart-weather"

@function_tool()
async def get_weather_n8n(
    context: RunContext,
    city: str,
    units: str = "celsius"
) -> str:
    """
    Get weather information through n8n workflow.
    Use this tool when user asks about weather in any city.
    
    Args:
        city: City name (e.g., "London", "Paris", "Tokyo")
        units: Temperature units ("celsius" or "fahrenheit")
    
    Returns:
        Weather information as a formatted string
    """
    logger.info(f"üå§Ô∏è [N8N WEATHER] Getting weather for '{city}' in {units}")
    print(f"üå§Ô∏è [N8N WEATHER] Requesting weather for {city}...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è n8n –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç workflow
        payload = {
            "action": "weather",
            "city": city,
            "units": units,
            "date": "today",
            "user_id": "livekit_user"
        }
        
        logger.info(f"üåê [N8N REQUEST] Sending to {N8N_WEATHER_URL}")
        logger.info(f"üåê [N8N PAYLOAD] {payload}")
        
        # –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ n8n workflow
        async with aiohttp.ClientSession() as session:
            async with session.post(
                N8N_WEATHER_URL,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                
                logger.info(f"üì° [N8N RESPONSE] Status: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    
                    logger.info(f"üìä [N8N DATA] Success: {result.get('success', False)}")
                    logger.info(f"üìä [N8N MESSAGE] {result.get('message', 'No message')[:100]}...")
                    
                    if result.get('success', False):
                        message = result.get('message', 'Weather information retrieved successfully.')
                        
                        print(f"‚úÖ [N8N SUCCESS] {message[:100]}...")
                        logger.info(f"‚úÖ [N8N SUCCESS] Weather retrieved for {city}")
                        
                        return message
                    else:
                        error_message = result.get('message', 'Failed to get weather information.')
                        logger.error(f"‚ùå [N8N ERROR] {error_message}")
                        print(f"‚ùå [N8N ERROR] {error_message}")
                        return error_message
                        
                else:
                    error_text = await response.text()
                    error_msg = f"Weather service returned status {response.status}. Please try again."
                    logger.error(f"‚ùå [N8N HTTP ERROR] Status {response.status}: {error_text[:200]}")
                    print(f"‚ùå [N8N HTTP ERROR] Status {response.status}")
                    return error_msg
                    
    except asyncio.TimeoutError:
        error_msg = "Weather request timed out. The service might be busy, please try again."
        logger.error(f"‚è∞ [N8N TIMEOUT] Weather request timed out for {city}")
        print(f"‚è∞ [N8N TIMEOUT] Request timed out")
        return error_msg
        
    except aiohttp.ClientError as e:
        error_msg = f"Failed to connect to weather service. Please check your connection and try again."
        logger.error(f"üåê [N8N CONNECTION ERROR] {str(e)}")
        print(f"üåê [N8N CONNECTION ERROR] {str(e)}")
        return error_msg
        
    except Exception as e:
        error_msg = f"An unexpected error occurred while getting weather information for {city}. Please try again."
        logger.error(f"üí• [N8N EXCEPTION] Weather error for '{city}': {e}")
        logger.exception("Full n8n weather exception traceback:")
        print(f"üí• [N8N EXCEPTION] {str(e)}")
        return error_msg

# -------------------- Test n8n Connection --------------------
async def test_n8n_connection():
    """Test if n8n workflow is accessible"""
    try:
        logger.info(f"üß™ [N8N TEST] Testing connection to {N8N_WEATHER_URL}")
        
        test_payload = {
            "action": "weather",
            "city": "London",
            "units": "celsius",
            "user_id": "test_user"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                N8N_WEATHER_URL,
                json=test_payload,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    if result.get('success', False):
                        logger.info("‚úÖ [N8N TEST] Connection successful")
                        print("‚úÖ [N8N TEST] Weather service is working")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è [N8N TEST] Service responded but failed: {result.get('message', 'Unknown error')}")
                        print("‚ö†Ô∏è [N8N TEST] Service responded but returned an error")
                        return False
                else:
                    logger.error(f"‚ùå [N8N TEST] HTTP error {response.status}")
                    print(f"‚ùå [N8N TEST] HTTP error {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"üí• [N8N TEST] Connection test failed: {e}")
        print(f"üí• [N8N TEST] Connection failed: {e}")
        return False

# -------------------- Agent Class --------------------
class N8NAssistant(Agent):
    """–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–≥–æ–¥—ã + OpenAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ email"""
    
    def __init__(self):
        super().__init__(
            instructions=(
                "You are a helpful voice assistant with access to weather information, web search, and email sending. "
                "ALWAYS respond in English only, regardless of what language the user speaks. "
                "You understand all languages but respond ONLY in English. "
                "Do NOT mention the language issue - just answer naturally in English. "
                
                "For function calling tasks, only use the functions you have been provided with. "
                "When you summarize, make sure you've considered ALL previous instructions. "
                "When users ask about weather, use the get_weather_n8n tool ONCE and provide the exact information returned. "
                "When users ask for information you don't know, use the search_web tool ONCE to find current information. "
                "When users ask to send email, use the send_email tool ONCE with the information they provide. "
                "Do NOT make up information - only use data from your tools. "
                "Be clear, concise, and direct. "
                
                "IMPORTANT: After calling any function and getting a result, provide the information to the user immediately. "
                "Do NOT call the same function multiple times for the same request. "
                "One function call per user request is sufficient."
            ),
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º n8n –ø–æ–≥–æ–¥—É —Å OpenAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            tools=[get_weather_n8n, search_web, send_email],
        )
        logger.info("N8N Assistant agent initialized with n8n weather, search, and email tools")

# -------------------- Entrypoint --------------------
async def entrypoint(ctx: JobContext):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è N8N –∞–≥–µ–Ω—Ç–∞"""
    
    logger.info("üöÄ Starting N8N Assistant entrypoint")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üß™ [STARTUP] Testing n8n weather service...")
    n8n_working = await test_n8n_connection()
    
    if not n8n_working:
        print("‚ö†Ô∏è [WARNING] n8n weather service is not responding, but continuing anyway...")
        logger.warning("‚ö†Ô∏è [WARNING] n8n weather service test failed, but continuing...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    await ctx.connect()
    logger.info(f"‚úÖ Connected to room: {ctx.room.name}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = N8NAssistant()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–µ—Å—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è function calling
    session = AgentSession(
        # VAD –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        vad=silero.VAD.load(),
        
        # OpenAI STT (Whisper) - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¢–û–õ–¨–ö–û –ê–ù–ì–õ–ò–ô–°–ö–ò–ô!
        stt=openai.STT(
            language="en",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –Ω–∏–∫–∞–∫–æ–π –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!
        ),
        
        # –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ LiveKit –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        llm=openai.LLM(
            base_url="https://api.cerebras.ai/v1",
            api_key=cerebras_api_key,
            model="llama-3.3-70b",  # –î–æ—Å—Ç—É–ø–Ω–∞—è 70B –º–æ–¥–µ–ª—å –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
            temperature=0.5,  # –ö–∞–∫ –≤ AutoGen –ø—Ä–∏–º–µ—Ä–µ
        ),
                
        # OpenAI TTS –¥–ª—è –æ–∑–≤—É—á–∫–∏
        tts=openai.TTS(
            voice="alloy",
            speed=1.0,
        ),
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ AutoGen –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        max_tool_steps=1,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —à–∞–≥–æ–º —Ñ—É–Ω–∫—Ü–∏–π
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        allow_interruptions=True,
        min_endpointing_delay=0.5,  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        max_endpointing_delay=6.0,
    )
    
    logger.info("‚úÖ Session created: Whisper STT (EN) + Cerebras Llama-3.3-70B (AutoGen settings) + TTS + N8N Weather + Search + Email")
    
    # ==========================================
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # ==========================================
    
    @session.on("user_input_transcribed")
    def on_user_input_transcribed(event):
        """–ö–æ–≥–¥–∞ —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ STT"""
        transcript = getattr(event, 'transcript', 'No transcript')
        is_final = getattr(event, 'is_final', False)
        if is_final:
            logger.info(f"üë§ [USER FINAL] {transcript}")
            print(f"\nüë§ [USER] {transcript}")
        else:
            logger.debug(f"üë§ [USER PARTIAL] {transcript}")
    
    @session.on("conversation_item_added")
    def on_conversation_item_added(event):
        """–ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–õ–ò –∞–≥–µ–Ω—Ç)"""
        item = getattr(event, 'item', None)
        if item:
            role = getattr(item, 'role', 'unknown')
            content = getattr(item, 'text_content', '') or str(getattr(item, 'content', ''))
            interrupted = getattr(item, 'interrupted', False)
            
            if role == "user":
                logger.info(f"üí¨ [CHAT USER] {content}")
                print(f"üí¨ [CHAT USER] {content}")
            elif role == "assistant":
                logger.info(f"üí¨ [CHAT ASSISTANT] {content}")
                print(f"üí¨ [CHAT ASSISTANT] {content}")
                print("-" * 60)
            
            if interrupted:
                logger.info(f"‚ö†Ô∏è [INTERRUPTED] {role} was interrupted")
    
    @session.on("speech_created")
    def on_speech_created(event):
        """–ö–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Ä–µ—á—å"""
        logger.info("üîä [SPEECH CREATED] Agent is about to speak")
        print("üîä [ASSISTANT] Creating speech...")
    
    @session.on("agent_state_changed")
    def on_agent_state_changed(event):
        """–ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"""
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.info(f"üîÑ [AGENT STATE] {old_state} -> {new_state}")
        print(f"üîÑ [AGENT] {old_state} -> {new_state}")
    
    @session.on("user_state_changed")  
    def on_user_state_changed(event):
        """–ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"""
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.debug(f"üë§ [USER STATE] {old_state} -> {new_state}")
        
    @session.on("function_tools_executed")
    def on_function_tools_executed(event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üõ†Ô∏è [TOOLS EXECUTED] Function tools completed")
        print("üõ†Ô∏è [TOOLS] Function executed - processing result...")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ zipped()
        try:
            if hasattr(event, 'zipped') and callable(event.zipped):
                for call, result in event.zipped():
                    if hasattr(call, 'function_info') and hasattr(call.function_info, 'name'):
                        function_name = call.function_info.name
                    else:
                        function_name = getattr(call, 'function_name', 'unknown')
                    
                    result_str = str(result)[:200] if result else 'No result'
                    logger.info(f"üõ†Ô∏è [TOOL SUCCESS] {function_name}: {result_str}...")
                    print(f"üõ†Ô∏è [TOOL SUCCESS] {function_name}: {result_str[:100]}...")
            else:
                # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ zipped() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.info("üõ†Ô∏è [TOOL RESULT] Using fallback extraction method")
                print("üõ†Ô∏è [TOOL RESULT] Function completed (fallback method)")
                
        except Exception as e:
            logger.error(f"‚ùå [TOOL EXTRACTION ERROR] {e}")
            print(f"‚ùå [TOOL EXTRACTION ERROR] {e}")
        
    @session.on("metrics_collected")
    def on_metrics_collected(event):
        """–ö–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–∞–º–∞
        pass
    
    @session.on("close")
    def on_session_close(event):
        """–ö–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"""
        logger.info("‚ùå [SESSION CLOSED] Agent session ended")
        print("‚ùå [SESSION] Closed")
        
    @session.on("error")
    def on_error(event):
        """–ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞"""
        error = getattr(event, 'error', str(event))
        recoverable = getattr(error, 'recoverable', True) if hasattr(error, 'recoverable') else True
        logger.error(f"‚ùå [ERROR] {error} (recoverable: {recoverable})")
        print(f"‚ùå [ERROR] {error}")
    
    # ==========================================
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    # ==========================================
    
    await session.start(
        agent=agent,
        room=ctx.room,
    )
    
    logger.info("‚úÖ Session started successfully")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try:
        await session.generate_reply(
            instructions="Say hello and introduce yourself briefly as a helpful voice assistant with weather information."
        )
        logger.info("‚úÖ Initial greeting generated")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not generate initial greeting: {e}")
        print("ü§ñ [ASSISTANT] Hello! I'm your voice assistant with weather, search, and email capabilities!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n" + "="*80)
    print("ü§ñ [N8N ASSISTANT] Ready for conversation!")
    print("üìã [INFO] OpenAI Whisper STT + Cerebras Llama-3.3-70B (AutoGen) + OpenAI TTS + N8N Weather")
    print("üîç [VAD] Silero VAD for speech detection")
    print("‚ö° [SPEED] Cerebras ~450 tokens/sec + AutoGen settings")
    print("üåç [STT] Treats ALL speech as English (no language detection)")
    print("üå§Ô∏è [WEATHER] Weather via n8n workflow (auto2025system.duckdns.org)")
    print("üõ†Ô∏è [TOOLS] N8N Weather + OpenAI Search + OpenAI Email")
    print("üîß [FIX] –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: temp=0.5 + max_tool_steps=1")
    print("üìù [LOGGING] All activity logged to agent_n8n.log and console")
    print("")
    print("üéØ [TEST COMMANDS] (ALL speech treated as English):")
    print("   ‚Ä¢ 'What's the weather in Cork?' ‚Üí n8n weather tool") 
    print("   ‚Ä¢ 'Weather in Paris in Fahrenheit?' ‚Üí n8n weather with units")
    print("   ‚Ä¢ 'Search for latest AI news' ‚Üí OpenAI search tool")
    print("   ‚Ä¢ 'Send email to test@example.com' ‚Üí OpenAI email tool")
    print("")
    print("üéÆ [CONTROLS] Speak into your microphone, press Ctrl+C to quit")
    print("="*80 + "\n")
    print("üéôÔ∏è [LISTENING] Start speaking now...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üëã [SHUTDOWN] N8N Assistant shutting down...")
        print("\nüëã [ASSISTANT] Goodbye!")

# -------------------- Main --------------------
if __name__ == "__main__":
    logger.info("üöÄ Starting N8N Assistant LiveKit agent application")
    cli.run_app(
        WorkerOptions(
            entrypoint_fnc=entrypoint
        )
    )