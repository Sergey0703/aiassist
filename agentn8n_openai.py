import asyncio
import logging
import os
from dotenv import load_dotenv
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    WorkerOptions,
    cli,
)
from livekit.plugins import openai, silero

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from toolsn8n import AVAILABLE_TOOLS, test_n8n_connection

# -------------------- Setup --------------------
load_dotenv()

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö LiveKit
logger = logging.getLogger("n8n-assistant")
logger.setLevel(logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler("agent_n8n.log", encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_api_key = os.getenv("OPENAI_API_KEY")

if not openai_api_key:
    logger.error("OPENAI_API_KEY not found in environment variables")
    raise ValueError("OPENAI_API_KEY is required")

# -------------------- Agent Class --------------------
class N8NAssistant(Agent):
    """–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–≥–æ–¥—ã + OpenAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ email"""
    
    def __init__(self):
        super().__init__(
            instructions=(
                "You are a helpful voice assistant with access to weather information, web search, and email sending. "
                "ALWAYS respond in English only, regardless of what language the user speaks. "
                "You understand all languages but respond ONLY in English. "
                "Do NOT mention the language issue - just answer naturally in English. "
                "When users ask about weather, use the get_weather_n8n tool and provide the exact information returned. "
                "When users ask for information you don't know, use the search_web tool to find current information. "
                "When users ask to send email, use the send_email tool with the information they provide. "
                "Do NOT make up information - only use data from your tools. "
                "Be clear, concise, and direct. Do NOT add phrases like 'If you have any other questions' or 'Let me know if you need more help' - just give the information requested."
            ),
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ toolsn8n.py
            tools=AVAILABLE_TOOLS,
        )
        logger.info("N8N Assistant agent initialized with n8n weather, search, and email tools")

# -------------------- Event Handlers --------------------
def setup_session_events(session: AgentSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–∏"""
    
    @session.on("user_input_transcribed")
    def on_user_input_transcribed(event):
        """–ö–æ–≥–¥–∞ —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ STT"""
        transcript = getattr(event, 'transcript', 'No transcript')
        is_final = getattr(event, 'is_final', False)
        if is_final:
            logger.info(f"üë§ [USER FINAL] {transcript}")
            print(f"\nüë§ [USER] {transcript}")
        else:
            logger.debug(f"üë§ [USER PARTIAL] {transcript}")
    
    @session.on("conversation_item_added")
    def on_conversation_item_added(event):
        """–ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–õ–ò –∞–≥–µ–Ω—Ç)"""
        item = getattr(event, 'item', None)
        if item:
            role = getattr(item, 'role', 'unknown')
            content = getattr(item, 'text_content', '') or str(getattr(item, 'content', ''))
            interrupted = getattr(item, 'interrupted', False)
            
            if role == "user":
                logger.info(f"üí¨ [CHAT USER] {content}")
                print(f"üí¨ [CHAT USER] {content}")
            elif role == "assistant":
                logger.info(f"üí¨ [CHAT ASSISTANT] {content}")
                print(f"üí¨ [CHAT ASSISTANT] {content}")
                print("-" * 60)
            
            if interrupted:
                logger.info(f"‚ö†Ô∏è [INTERRUPTED] {role} was interrupted")
    
    @session.on("speech_created")
    def on_speech_created(event):
        """–ö–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Ä–µ—á—å"""
        logger.info("üîä [SPEECH CREATED] Agent is about to speak")
        print("üîä [ASSISTANT] Creating speech...")
    
    @session.on("agent_state_changed")
    def on_agent_state_changed(event):
        """–ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"""
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.info(f"üîÑ [AGENT STATE] {old_state} -> {new_state}")
        print(f"üîÑ [AGENT] {old_state} -> {new_state}")
    
    @session.on("user_state_changed")  
    def on_user_state_changed(event):
        """–ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"""
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.debug(f"üë§ [USER STATE] {old_state} -> {new_state}")
        
    @session.on("function_tools_executed")
    def on_function_tools_executed(event):
        """–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        logger.info("üõ†Ô∏è [TOOLS EXECUTED] Function tools completed")
        print("üõ†Ô∏è [TOOLS] Function executed - processing result...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        if hasattr(event, 'function_calls') and event.function_calls:
            for i, call in enumerate(event.function_calls):
                function_name = getattr(call, 'function_name', 'unknown')
                result = getattr(call, 'result', 'no result')
                logger.info(f"üõ†Ô∏è [TOOL RESULT {i+1}] {function_name}: {str(result)[:200]}...")
                print(f"üõ†Ô∏è [TOOL {i+1}] {function_name}: {str(result)[:100]}...")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏—è
        if hasattr(event, 'results') and event.results:
            logger.info(f"üõ†Ô∏è [TOOL RESULTS] Found {len(event.results)} results")
            print(f"üõ†Ô∏è [RESULTS] Found {len(event.results)} tool results")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–±—ã—Ç–∏—è
        for attr in ['tools', 'calls', 'results', 'output']:
            if hasattr(event, attr):
                value = getattr(event, attr, None)
                if value:
                    logger.info(f"üõ†Ô∏è [ATTR] {attr}: {str(value)[:100]}...")
                    print(f"üõ†Ô∏è [ATTR] {attr}: {str(value)[:50]}...")
        
    @session.on("metrics_collected")
    def on_metrics_collected(event):
        """–ö–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–∞–º–∞
        pass
    
    @session.on("close")
    def on_session_close(event):
        """–ö–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"""
        logger.info("‚ùå [SESSION CLOSED] Agent session ended")
        print("‚ùå [SESSION] Closed")
        
    @session.on("error")
    def on_error(event):
        """–ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞"""
        error = getattr(event, 'error', str(event))
        recoverable = getattr(error, 'recoverable', True) if hasattr(error, 'recoverable') else True
        logger.error(f"‚ùå [ERROR] {error} (recoverable: {recoverable})")
        print(f"‚ùå [ERROR] {error}")

# -------------------- Session Creation --------------------
def create_agent_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞ —Å OpenAI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    session = AgentSession(
        # VAD –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        vad=silero.VAD.load(),
        
        # OpenAI STT (Whisper) - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¢–û–õ–¨–ö–û –ê–ù–ì–õ–ò–ô–°–ö–ò–ô!
        stt=openai.STT(
            language="en",  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –Ω–∏–∫–∞–∫–æ–π –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!
        ),
        
        # OpenAI LLM - GPT-4o-mini –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        llm=openai.LLM(
            model="gpt-4o-mini",
            temperature=0.7,
        ),
                
        # OpenAI TTS –¥–ª—è –æ–∑–≤—É—á–∫–∏
        tts=openai.TTS(
            voice="alloy",
            speed=1.0,
        ),
    )
    
    logger.info("‚úÖ Session created: Whisper STT (EN) + GPT-4o-mini + TTS + N8N Weather + Search + Email")
    return session

# -------------------- Info Display --------------------
def display_startup_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –∞–≥–µ–Ω—Ç–∞"""
    print("\n" + "="*80)
    print("ü§ñ [N8N ASSISTANT] Ready for conversation!")
    print("üìã [INFO] OpenAI Whisper STT (ENGLISH ONLY) + GPT-4o-mini + TTS + N8N Weather")
    print("üîç [VAD] Silero VAD for speech detection")
    print("üí∞ [COST] ~$0.02 per minute (very affordable!)")
    print("üåç [STT] Treats ALL speech as English (no language detection)")
    print("üå§Ô∏è [WEATHER] Weather via n8n workflow (auto2025system.duckdns.org)")
    print("üõ†Ô∏è [TOOLS] N8N Weather + OpenAI Search + OpenAI Email")
    print("üìù [LOGGING] All activity logged to agent_n8n.log and console")
    print("")
    print("üéØ [TEST COMMANDS] (ALL speech treated as English):")
    print("   ‚Ä¢ 'What's the weather in London?' ‚Üí n8n weather tool") 
    print("   ‚Ä¢ 'Weather in Paris in Fahrenheit?' ‚Üí n8n weather with units")
    print("   ‚Ä¢ 'Search for latest AI news' ‚Üí OpenAI search tool")
    print("   ‚Ä¢ 'Send email to test@example.com' ‚Üí OpenAI email tool")
    print("")
    print("üéÆ [CONTROLS] Speak into your microphone, press Ctrl+C to quit")
    print("="*80 + "\n")
    print("üéôÔ∏è [LISTENING] Start speaking now...")

# -------------------- Entrypoint --------------------
async def entrypoint(ctx: JobContext):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è N8N –∞–≥–µ–Ω—Ç–∞"""
    
    logger.info("üöÄ Starting N8N Assistant entrypoint")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üß™ [STARTUP] Testing n8n weather service...")
    n8n_working = await test_n8n_connection()
    
    if not n8n_working:
        print("‚ö†Ô∏è [WARNING] n8n weather service is not responding, but continuing anyway...")
        logger.warning("‚ö†Ô∏è [WARNING] n8n weather service test failed, but continuing...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ LiveKit
    await ctx.connect()
    logger.info(f"‚úÖ Connected to room: {ctx.room.name}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    agent = N8NAssistant()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å OpenAI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    session = create_agent_session()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setup_session_events(session)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≥–µ–Ω—Ç–∞
    await session.start(
        agent=agent,
        room=ctx.room,
    )
    
    logger.info("‚úÖ Session started successfully")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try:
        await session.generate_reply(
            instructions="Say hello and introduce yourself as a helpful voice assistant with weather information."
        )
        logger.info("‚úÖ Initial greeting generated")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not generate initial greeting: {e}")
        print("ü§ñ [ASSISTANT] Hello! I'm your voice assistant with weather, search, and email capabilities!")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    display_startup_info()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üëã [SHUTDOWN] N8N Assistant shutting down...")
        print("\nüëã [ASSISTANT] Goodbye!")

# -------------------- Main --------------------
if __name__ == "__main__":
    logger.info("üöÄ Starting N8N Assistant LiveKit agent application")
    cli.run_app(
        WorkerOptions(
            entrypoint_fnc=entrypoint
        )
    )