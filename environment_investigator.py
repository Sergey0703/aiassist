#!/usr/bin/env python3
"""
Environment Investigation Script
–ò—Å—Å–ª–µ–¥—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
"""

import sys
import subprocess
import os
from pathlib import Path

def get_all_packages():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "list"], 
                              capture_output=True, text=True, check=True)
        packages = {}
        for line in result.stdout.split('\n')[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if line.strip():
                parts = line.split()
                if len(parts) >= 2:
                    packages[parts[0]] = parts[1]
        return packages
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error running pip list: {e}")
        return {}

def search_noise_cancellation_packages():
    """–ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å noise cancellation"""
    print("üîç [NOISE CANCELLATION SEARCH] Looking for related packages...")
    
    all_packages = get_all_packages()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    keywords = ['noise', 'cancellation', 'krisp', 'nvidia', 'audio', 'bvc']
    
    found_packages = []
    for package_name, version in all_packages.items():
        package_lower = package_name.lower()
        if any(keyword in package_lower for keyword in keywords):
            found_packages.append((package_name, version))
    
    if found_packages:
        print("üì¶ [FOUND AUDIO/NOISE PACKAGES]:")
        for name, version in found_packages:
            print(f"   ‚úÖ {name:<30} {version}")
    else:
        print("   ‚ùå No noise cancellation packages found")
    
    return found_packages

def check_livekit_plugins():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ livekit –ø–ª–∞–≥–∏–Ω—ã"""
    print("\nüîß [LIVEKIT PLUGINS] Checking all LiveKit plugins...")
    
    all_packages = get_all_packages()
    
    livekit_plugins = []
    for package_name, version in all_packages.items():
        if package_name.startswith('livekit-plugins-'):
            livekit_plugins.append((package_name, version))
    
    if livekit_plugins:
        print("üì¶ [LIVEKIT PLUGINS INSTALLED]:")
        for name, version in livekit_plugins:
            print(f"   ‚úÖ {name:<35} {version}")
    else:
        print("   ‚ùå No livekit-plugins found")
    
    return livekit_plugins

def test_noise_cancellation_import():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ noise_cancellation"""
    print("\nüß™ [IMPORT TEST] Testing different import methods...")
    
    import_tests = [
        ("from livekit.plugins import noise_cancellation", "Standard import"),
        ("from livekit.plugins.krisp import VAD", "Krisp plugin"),
        ("from livekit.plugins.nvidia import VAD", "NVIDIA plugin"),
        ("import livekit.plugins.krisp", "Krisp module"),
        ("import livekit.plugins.nvidia", "NVIDIA module"),
    ]
    
    for import_code, description in import_tests:
        try:
            exec(import_code)
            print(f"   ‚úÖ {description:<20} SUCCESS")
        except ImportError as e:
            print(f"   ‚ùå {description:<20} FAILED: {e}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è {description:<20} ERROR: {e}")

def check_available_plugins():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüåê [AVAILABLE PLUGINS] Checking PyPI for available LiveKit plugins...")
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ LiveKit –ø–ª–∞–≥–∏–Ω—ã —Å noise cancellation
    potential_plugins = [
        "livekit-plugins-krisp",
        "livekit-plugins-nvidia", 
        "livekit-plugins-bvc",
        "livekit-plugins-noise-cancellation",
        "livekit-plugins-audio",
    ]
    
    for plugin in potential_plugins:
        try:
            result = subprocess.run([sys.executable, "-m", "pip", "show", plugin], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ {plugin:<35} INSTALLED")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ PyPI
                result = subprocess.run([sys.executable, "-m", "pip", "index", "versions", plugin], 
                                      capture_output=True, text=True)
                if "No matching distribution found" not in result.stderr:
                    print(f"   üîç {plugin:<35} AVAILABLE (not installed)")
                else:
                    print(f"   ‚ùå {plugin:<35} NOT FOUND")
        except Exception as e:
            print(f"   ‚ö†Ô∏è {plugin:<35} ERROR: {e}")

def show_python_environment():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    print("\nüêç [PYTHON ENVIRONMENT]:")
    print(f"   Python version: {sys.version}")
    print(f"   Python executable: {sys.executable}")
    print(f"   Virtual environment: {os.environ.get('VIRTUAL_ENV', 'Not detected')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º site-packages
    site_packages = [p for p in sys.path if 'site-packages' in p]
    if site_packages:
        print(f"   Site-packages: {site_packages[0]}")

def generate_comparison_script():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"""
    script_content = '''
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ –í–¢–û–†–û–ú (—Ä–∞–±–æ—á–µ–º) –æ–∫—Ä—É–∂–µ–Ω–∏–∏
# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ compare_env.py –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞–º

import subprocess
import sys

def export_packages():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "freeze"], 
                              capture_output=True, text=True, check=True)
        
        with open("working_env_packages.txt", "w") as f:
            f.write(result.stdout)
        
        print("‚úÖ Packages exported to working_env_packages.txt")
        print("üìã Copy this file to your current environment")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º livekit –ø–∞–∫–µ—Ç—ã
        livekit_packages = [line for line in result.stdout.split('\\n') 
                           if 'livekit' in line.lower()]
        
        print("\\nüîß [LIVEKIT PACKAGES in working environment]:")
        for package in livekit_packages:
            print(f"   {package}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    export_packages()
'''
    
    with open("compare_env.py", "w") as f:
        f.write(script_content)
    
    print("\nüìÑ [COMPARISON SCRIPT] Generated compare_env.py")
    print("   1. Copy this file to your working environment")
    print("   2. Run: python compare_env.py")
    print("   3. Copy working_env_packages.txt back here")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("üîç [ENVIRONMENT INVESTIGATION] Starting investigation...")
    print("=" * 80)
    
    show_python_environment()
    livekit_plugins = check_livekit_plugins()
    noise_packages = search_noise_cancellation_packages()
    test_noise_cancellation_import()
    check_available_plugins()
    generate_comparison_script()
    
    print("\n" + "=" * 80)
    print("üéØ [RECOMMENDATIONS]:")
    
    if not any('krisp' in pkg[0].lower() for pkg in livekit_plugins):
        print("   üî∏ Try: pip install livekit-plugins-krisp")
    
    if not any('nvidia' in pkg[0].lower() for pkg in livekit_plugins):
        print("   üî∏ Try: pip install livekit-plugins-nvidia")
    
    print("\nüìã [NEXT STEPS]:")
    print("   1. Run compare_env.py in your working environment")
    print("   2. Compare packages list")
    print("   3. Install missing packages")
    
    print("\nüîÑ [MANUAL COMPARISON]:")
    print("   In working environment run:")
    print("   pip list | findstr livekit")
    print("   pip freeze > working_packages.txt")

if __name__ == "__main__":
    main()