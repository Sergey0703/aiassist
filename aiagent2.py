import asyncio
import logging
import os
from dotenv import load_dotenv

from livekit import agents
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    WorkerOptions,
    cli,
)
from livekit.plugins import google, silero, deepgram, elevenlabs
from prompts import AGENT_INSTRUCTION, SESSION_INSTRUCTION
from aitools import get_weather, search_web, send_email

# -------------------- Setup --------------------
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("aiassist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
google_api_key = os.getenv("GOOGLE_API_KEY")
assemblyai_api_key = os.getenv("ASSEMBLYAI_API_KEY")

if not google_api_key:
    logger.error("GOOGLE_API_KEY not found in environment variables")
    raise ValueError("GOOGLE_API_KEY is required")

if not assemblyai_api_key:
    logger.error("ASSEMBLYAI_API_KEY not found in environment variables")
    raise ValueError("ASSEMBLYAI_API_KEY is required")


# -------------------- AIAssist Agent Class --------------------
class AIAssist(Agent):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ç–∏–ª–µ –¥–≤–æ—Ä–µ—Ü–∫–æ–≥–æ –∏–∑ Iron Man"""
    
    def __init__(self):
        super().__init__(
            instructions=AGENT_INSTRUCTION,
            # ‚úÖ TOOLS –í AGENT - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê!
            tools=[get_weather, search_web, send_email],
        )
        logger.info("AIAssist agent initialized with tools: weather, search, email")


# -------------------- Entrypoint --------------------
async def entrypoint(ctx: JobContext):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è AIAssist –∞–≥–µ–Ω—Ç–∞"""
    
    logger.info("Starting AIAssist entrypoint")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    await ctx.connect()
    logger.info(f"Connected to room: {ctx.room.name}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –° –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò
    agent = AIAssist()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å Voice Pipeline - –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ì–û–õ–û–°–û–í–û–ô –ê–ì–ï–ù–¢
    session = AgentSession(
        # VAD –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        vad=silero.VAD.load(),
        
        # ‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô VOICE PIPELINE!
        stt=deepgram.STT(model="nova-2"),   # Deepgram STT - –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        llm=google.LLM(                     # Google LLM —Å function calling
            model="gemini-2.0-flash",
            temperature=0.7,
        ),
        tts=elevenlabs.TTS(),               # ElevenLabs TTS - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–∞!
    )
    
    logger.info("AIAssist session created with Voice Pipeline (STT + LLM + TTS) + Tools")
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è LiveKit Agents v1.0+
    @session.on("user_input_transcribed")
    def on_user_transcribed(event):
        transcript = getattr(event, 'transcript', 'No transcript')
        is_final = getattr(event, 'is_final', False)
        logger.info(f"[USER TRANSCRIBED] {transcript} (final: {is_final})")
        print(f"\nüé§ [USER] {transcript} {'‚úì' if is_final else '...'}")
        if is_final:
            print("-" * 80)
    
    @session.on("conversation_item_added")
    def on_conversation_item(event):
        item = getattr(event, 'item', None)
        if item:
            role = getattr(item, 'role', 'unknown')
            text_content = getattr(item, 'text_content', str(item))
            interrupted = getattr(item, 'interrupted', False)
            
            logger.info(f"[CONVERSATION] {role}: {text_content} (interrupted: {interrupted})")
            
            if role == "user":
                print(f"üë§ [USER FINAL] {text_content}")
            elif role == "assistant":
                print(f"ü§ñ [AIASSIST] {text_content}")
            print("-" * 80)
    
    @session.on("speech_created")
    def on_speech_created(event):
        logger.info("[AIASSIST] Speech created - starting to speak")
        print("üîä [AIASSIST] Starting to speak...")
    
    @session.on("agent_state_changed")
    def on_agent_state(event):
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.info(f"[AGENT STATE] {old_state} -> {new_state}")
        print(f"‚ö° [STATE] {old_state} -> {new_state}")
    
    # ================================
    # –°–û–ë–´–¢–ò–Ø –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê FUNCTION CALLING
    # ================================
    
    @session.on("function_call_started")
    def on_function_call_started(event):
        function_name = getattr(event, 'function_name', 'unknown')
        arguments = getattr(event, 'arguments', {})
        logger.info(f"üöÄ [FUNCTION CALL STARTED] {function_name} with args: {arguments}")
        print(f"üöÄ [FUNCTION CALL STARTED] {function_name} with args: {arguments}")
    
    @session.on("function_call_completed")
    def on_function_call_completed(event):
        function_name = getattr(event, 'function_name', 'unknown')
        result = getattr(event, 'result', 'no result')
        logger.info(f"‚úÖ [FUNCTION CALL COMPLETED] {function_name} returned: {result}")
        print(f"‚úÖ [FUNCTION CALL COMPLETED] {function_name} returned: {result}")
    
    @session.on("function_tools_executed")
    def on_function_tools_executed(event):
        logger.info("üîß [TOOLS EXECUTED] Function tools have been executed!")
        print("üîß [TOOLS EXECUTED] Function tools have been executed!")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(event, 'results') and event.results:
            for i, result in enumerate(event.results):
                logger.info(f"üîß [TOOL RESULT {i+1}] {result}")
                print(f"üîß [TOOL RESULT {i+1}] {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for attr in dir(event):
            if not attr.startswith('_'):
                value = getattr(event, attr, None)
                if value and not callable(value):
                    logger.info(f"üîß [TOOL EVENT.{attr}] {value}")
                    print(f"üîß [TOOL EVENT.{attr}] {value}")
    
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    @session.on("*")
    def on_all_events(event_name, event):
        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        tool_keywords = ['function', 'tool', 'call', 'execute']
        if any(keyword in event_name.lower() for keyword in tool_keywords):
            logger.info(f"üîç [TOOL EVENT] {event_name}: {type(event).__name__}")
            print(f"üîç [TOOL EVENT] {event_name}: {type(event).__name__}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for attr in dir(event):
                if not attr.startswith('_') and not callable(getattr(event, attr, None)):
                    value = getattr(event, attr, None)
                    if value is not None:
                        logger.info(f"üîç [TOOL EVENT.{attr}] {value}")
                        print(f"üîç [TOOL EVENT.{attr}] {value}")
    
    # –û—à–∏–±–∫–∏
    @session.on("error")
    def on_error(event):
        error = getattr(event, 'error', str(event))
        recoverable = getattr(error, 'recoverable', False) if hasattr(error, 'recoverable') else True
        logger.error(f"[ERROR] {error} (recoverable: {recoverable})")
        print(f"‚ùå [ERROR] {error} (recoverable: {recoverable})")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    @session.on("*")
    def on_debug_events(event_name, event):
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ù–ï tool events - –æ–Ω–∏ –≤—ã—à–µ)
        important_events = [
            "user_input", "transcript", "speech", "conversation", 
            "turn", "started", "stopped", "committed"
        ]
        tool_keywords = ['function', 'tool', 'call', 'execute']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –Ω–æ –ù–ï tool events (–æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ)
        if (any(keyword in event_name.lower() for keyword in important_events) and 
            not any(tool_keyword in event_name.lower() for tool_keyword in tool_keywords)):
            logger.debug(f"[DEBUG EVENT] {event_name}: {type(event).__name__}")
            print(f"üîç [DEBUG] {event_name}: {type(event).__name__}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    await session.start(
        agent=agent,
        room=ctx.room,
    )
    
    logger.info("AIAssist session started successfully")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try:
        await session.generate_reply(instructions=SESSION_INSTRUCTION)
        logger.info("Initial AIAssist greeting generated")
    except Exception as e:
        logger.warning(f"Could not generate initial greeting: {e}")
        print(f"\n[AIASSIST]: Hi my name is AIAssist, your personal assistant, how may I help you?")
    
    print("\n" + "="*80)
    print("ü§ñ [AIASSIST] Ready! Your sarcastic digital butler is at your service.")
    print("üìã [INFO] Using FULL Voice Pipeline (STT + LLM + TTS) with Function Calling")
    print("üé§ [SPEECH] Deepgram STT for speech recognition") 
    print("üß† [LLM] Google Gemini for intelligence")
    print("üîä [VOICE] ElevenLabs TTS for natural speech synthesis")
    print("üõ†Ô∏è [TOOLS] Available: Weather, Web Search, Email")
    print("üîç [MONITORING] Function calls will be logged in detail")
    print("üìù [LOGGING] All activity logged to aiassist.log and console")
    print("")
    print("üéØ [TEST COMMANDS]:")
    print("   ‚Ä¢ 'What's the weather in London?'")
    print("   ‚Ä¢ 'Search for latest AI news'") 
    print("   ‚Ä¢ 'Send email to test@example.com with subject Hello'")
    print("")
    print("üéÆ [CONTROLS] Speak into your microphone, press Ctrl+C to quit")
    print("="*80 + "\n")
    print("üéôÔ∏è [READY] Start speaking now...")
    print("üîß [WATCH] Looking for function call events...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    try:
        while True:
            await asyncio.sleep(0.1)
    except KeyboardInterrupt:
        logger.info("AIAssist shutting down...")
        print("\nüëã [AIASSIST] Goodbye, sir!")


# -------------------- Main --------------------
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º AIAssist
    logger.info("Starting AIAssist LiveKit agent application")
    cli.run_app(
        WorkerOptions(
            entrypoint_fnc=entrypoint
        )
    )