import asyncio
import logging
import os
from dotenv import load_dotenv

from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    WorkerOptions,
    cli,
)
from livekit.plugins import openai

# -------------------- Setup --------------------
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á
openai_api_key = os.getenv("OPENAI_API_KEY")

if not openai_api_key:
    logger.error("OPENAI_API_KEY not found in environment variables")
    raise ValueError("OPENAI_API_KEY is required")


# -------------------- Simple Agent --------------------
class SimpleAgent(Agent):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI"""
    
    def __init__(self):
        super().__init__(
            instructions="You are a helpful assistant. Respond briefly and clearly.",
        )
        logger.info("Simple agent initialized")


# -------------------- Entrypoint --------------------
async def entrypoint(ctx: JobContext):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    
    logger.info("Starting simple agent")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    await ctx.connect()
    logger.info(f"Connected to room: {ctx.room.name}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    agent = SimpleAgent()
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è —Å OpenAI LLM + TTS (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫)
    session = AgentSession(
        llm=openai.LLM(model="gpt-4o-mini", temperature=0.7),
        tts=openai.TTS(),  # –î–æ–±–∞–≤–ª—è–µ–º TTS —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
    )
    
    logger.info("Session created with OpenAI LLM")
    
    # –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    @session.on("conversation_item_added")
    def on_conversation_item(event):
        item = getattr(event, 'item', None)
        if item:
            role = getattr(item, 'role', 'unknown')
            text_content = getattr(item, 'text_content', str(item))
            
            if role == "user":
                print(f"üë§ [USER] {text_content}")
            elif role == "assistant":
                print(f"ü§ñ [ASSISTANT] {text_content}")
            print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    await session.start(agent=agent, room=ctx.room)
    
    logger.info("Session started successfully")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try:
        await session.generate_reply(instructions="Say hello and introduce yourself briefly.")
        logger.info("Initial greeting generated")
    except Exception as e:
        logger.warning(f"Could not generate greeting: {e}")
    
    print("\n" + "="*60)
    print("ü§ñ [SIMPLE AGENT] Ready for testing!")
    print("üìã [INFO] OpenAI GPT-4o-mini - NO TOOLS")
    print("üí¨ [MODE] Text mode - press [Ctrl+B] if needed")
    print("")
    print("üéØ [TEST]: Ask simple questions like:")
    print("   ‚Ä¢ 'What is 2+2?'")
    print("   ‚Ä¢ 'Tell me a joke'")
    print("   ‚Ä¢ 'What is Python?'")
    print("")
    print("‚å®Ô∏è [CONTROLS] Type messages, press Ctrl+C to quit")
    print("="*60 + "\n")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    try:
        while True:
            await asyncio.sleep(0.1)
    except KeyboardInterrupt:
        logger.info("Simple agent shutting down...")
        print("\nüëã [BYE] Simple agent stopped!")


# -------------------- Main --------------------
if __name__ == "__main__":
    logger.info("Starting simple OpenAI agent test")
    cli.run_app(
        WorkerOptions(
            entrypoint_fnc=entrypoint
        )
    )