"""
N8N Tools Package - –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LiveKit –∞–≥–µ–Ω—Ç–∞

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
- n8n_tools: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n workflows
- n8n_trade_tools: –¢–æ—Ä–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ n8n
- n8n_calendar_tools: –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ n8n
- web_tools: –í–µ–±-–ø–æ–∏—Å–∫ –∏ —Ä–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–∞–º–∏  
- email_tools: –û—Ç–ø—Ä–∞–≤–∫–∞ email –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- file_tools: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–≤ –±—É–¥—É—â–µ–º)
- ai_tools: AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤ –±—É–¥—É—â–µ–º)
"""

import logging
import asyncio
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
logger = logging.getLogger("tools")

# -------------------- –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
# N8N –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from .n8n_tools import (
    get_weather_n8n,
    test_n8n_connection,
    send_notification_n8n  # –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
)

# N8N —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from .n8n_trade_tools import (
    get_trade_results_n8n,
    test_trade_results_connection
)

# N8N –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from .n8n_calendar_tools import (
    get_calendar_data_n8n,
    test_calendar_connection
)

# –í–µ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã  
from .web_tools import (
    search_web,
    validate_web_tools
)

# Email –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from .email_tools import (
    send_email,
    validate_email_tools
)

# -------------------- –ì–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
AVAILABLE_TOOLS = [
    # N8N –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    get_weather_n8n,        # –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ n8n workflow
    get_trade_results_n8n,  # –¢–æ—Ä–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ n8n
    get_calendar_data_n8n,  # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ n8n
    
    # –í–µ–± —Å–µ—Ä–≤–∏—Å—ã
    search_web,             # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily AI
    
    # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏  
    send_email,             # –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP
    
    # send_notification_n8n, # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤
]

# -------------------- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ --------------------
DEVELOPMENT_TOOLS = [
    send_notification_n8n,  # N8N —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
]

# -------------------- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
TOOL_CATEGORIES = {
    "weather": [get_weather_n8n],
    "analytics": [get_trade_results_n8n],
    "calendar": [get_calendar_data_n8n],
    "communication": [send_email, send_notification_n8n], 
    "information": [search_web],
    "n8n_integrated": [get_weather_n8n, get_trade_results_n8n, get_calendar_data_n8n, send_notification_n8n],
    "web_services": [search_web, send_email],
    "productivity": [get_calendar_data_n8n, send_email],
}

# -------------------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ --------------------
def get_package_info() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    """
    return {
        "package": "N8N Tools",
        "version": "1.2.0",  # –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        "active_tools": len(AVAILABLE_TOOLS),
        "development_tools": len(DEVELOPMENT_TOOLS),
        "categories": list(TOOL_CATEGORIES.keys()),
        "tools_by_category": {
            category: [tool.__name__ for tool in tools] 
            for category, tools in TOOL_CATEGORIES.items()
        },
        "new_features": [
            "Calendar integration via n8n",
            "Enhanced productivity tools",
            "Multi-calendar support"
        ]
    }

# -------------------- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
async def validate_all_tools() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    Returns:
        Dict: –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    results = {
        "timestamp": asyncio.get_event_loop().time(),
        "n8n_tools": {},
        "n8n_trade_tools": {},
        "n8n_calendar_tools": {},  # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        "web_tools": {},
        "email_tools": {},
        "summary": {
            "total_tools": len(AVAILABLE_TOOLS),
            "working_tools": 0,
            "failed_tools": 0
        }
    }
    
    logger.info("üîç [VALIDATION] Starting tool validation...")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º N8N –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        n8n_status = await test_n8n_connection()
        results["n8n_tools"]["weather_service"] = n8n_status
        if n8n_status:
            results["summary"]["working_tools"] += 1
        else:
            results["summary"]["failed_tools"] += 1
    except Exception as e:
        logger.error(f"‚ùå [VALIDATION] N8N validation failed: {e}")
        results["n8n_tools"]["weather_service"] = False
        results["summary"]["failed_tools"] += 1
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º N8N —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        trade_status = await test_trade_results_connection()
        results["n8n_trade_tools"]["trade_analysis"] = trade_status
        if trade_status:
            results["summary"]["working_tools"] += 1
        else:
            results["summary"]["failed_tools"] += 1
    except Exception as e:
        logger.error(f"‚ùå [VALIDATION] N8N Trade validation failed: {e}")
        results["n8n_trade_tools"]["trade_analysis"] = False
        results["summary"]["failed_tools"] += 1
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º N8N –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        calendar_status = await test_calendar_connection()
        results["n8n_calendar_tools"]["calendar_service"] = calendar_status
        if calendar_status:
            results["summary"]["working_tools"] += 1
        else:
            results["summary"]["failed_tools"] += 1
    except Exception as e:
        logger.error(f"‚ùå [VALIDATION] N8N Calendar validation failed: {e}")
        results["n8n_calendar_tools"]["calendar_service"] = False
        results["summary"]["failed_tools"] += 1
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        web_status = await validate_web_tools()
        results["web_tools"].update(web_status)
        if web_status.get("search_web", False):
            results["summary"]["working_tools"] += 1
        else:
            results["summary"]["failed_tools"] += 1
    except Exception as e:
        logger.error(f"‚ùå [VALIDATION] Web tools validation failed: {e}")
        results["web_tools"]["search_web"] = False
        results["summary"]["failed_tools"] += 1
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º email –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        email_status = await validate_email_tools()
        results["email_tools"].update(email_status)
        if email_status.get("send_email", False):
            results["summary"]["working_tools"] += 1
        else:
            results["summary"]["failed_tools"] += 1
    except Exception as e:
        logger.error(f"‚ùå [VALIDATION] Email tools validation failed: {e}")
        results["email_tools"]["send_email"] = False
        results["summary"]["failed_tools"] += 1
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"‚úÖ [VALIDATION] Complete: {results['summary']['working_tools']}/{results['summary']['total_tools']} tools working")
    
    return results

# -------------------- –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
async def quick_tools_check() -> Dict[str, bool]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    Returns:
        Dict: –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    quick_status = {}
    
    logger.info("‚ö° [QUICK CHECK] Running quick tools validation...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    checks = [
        ("weather", test_n8n_connection()),
        ("trade_analysis", test_trade_results_connection()),
        ("calendar", test_calendar_connection()),
    ]
    
    for tool_name, check_coro in checks:
        try:
            result = await asyncio.wait_for(check_coro, timeout=5.0)
            quick_status[tool_name] = result
        except asyncio.TimeoutError:
            quick_status[tool_name] = False
            logger.warning(f"‚è∞ [QUICK CHECK] {tool_name} check timed out")
        except Exception as e:
            quick_status[tool_name] = False
            logger.error(f"‚ùå [QUICK CHECK] {tool_name} check failed: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–± –∏ email –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    try:
        import os
        quick_status["web_search"] = bool(os.getenv("TAVILY_API_KEY"))
        quick_status["email"] = bool(os.getenv("GMAIL_USER")) or bool(os.getenv("EMAIL_DEMO_MODE"))
    except:
        quick_status["web_search"] = False
        quick_status["email"] = False
    
    working_count = sum(1 for status in quick_status.values() if status)
    total_count = len(quick_status)
    
    logger.info(f"‚ö° [QUICK CHECK] Complete: {working_count}/{total_count} tools working")
    
    return quick_status

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ --------------------
def initialize_tools() -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Returns:
        bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    try:
        logger.info("üõ†Ô∏è [INIT] Initializing N8N Tools package...")
        
        package_info = get_package_info()
        
        logger.info(f"üì¶ [INIT] Package: {package_info['package']} v{package_info['version']}")
        logger.info(f"üîß [INIT] Active tools: {package_info['active_tools']}")
        logger.info(f"‚öóÔ∏è [INIT] Development tools: {package_info['development_tools']}")
        logger.info(f"üìÇ [INIT] Categories: {', '.join(package_info['categories'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if package_info.get('new_features'):
            logger.info(f"‚ú® [INIT] New features: {', '.join(package_info['new_features'])}")
        
        for category, tools in package_info['tools_by_category'].items():
            logger.info(f"   üìÅ {category}: {', '.join(tools)}")
        
        print("üõ†Ô∏è [TOOLS] N8N Tools package initialized successfully")
        print(f"   üì¶ Version: {package_info['version']}")
        print(f"   üîß Active tools: {package_info['active_tools']}")
        print(f"   üìÇ Categories: {len(package_info['categories'])}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå [INIT] Failed to initialize tools package: {e}")
        print(f"‚ùå [TOOLS] Initialization failed: {e}")
        return False

# -------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ --------------------
def get_tool_by_name(tool_name: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
    
    Args:
        tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    
    Returns:
        function: –§—É–Ω–∫—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
    """
    tool_mapping = {
        "get_weather_n8n": get_weather_n8n,
        "get_trade_results_n8n": get_trade_results_n8n,
        "get_calendar_data_n8n": get_calendar_data_n8n,
        "search_web": search_web,
        "send_email": send_email,
        "send_notification_n8n": send_notification_n8n,
    }
    
    return tool_mapping.get(tool_name)

# -------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --------------------
def get_tools_by_category(category: str) -> List:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Returns:
        List: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    return TOOL_CATEGORIES.get(category, [])

# -------------------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ --------------------
def get_tools_statistics() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    return {
        "total_tools": len(AVAILABLE_TOOLS),
        "development_tools": len(DEVELOPMENT_TOOLS),
        "categories_count": len(TOOL_CATEGORIES),
        "n8n_tools": len([tool for tool in AVAILABLE_TOOLS if "n8n" in tool.__name__]),
        "web_tools": len([tool for tool in AVAILABLE_TOOLS if tool in [search_web]]),
        "communication_tools": len([tool for tool in AVAILABLE_TOOLS if tool in [send_email]]),
        "tool_names": [tool.__name__ for tool in AVAILABLE_TOOLS],
        "categories": list(TOOL_CATEGORIES.keys())
    }

# -------------------- –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ --------------------
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    'AVAILABLE_TOOLS',
    'DEVELOPMENT_TOOLS', 
    'TOOL_CATEGORIES',
    
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    'get_package_info',
    'validate_all_tools',
    'quick_tools_check',
    'initialize_tools',
    'get_tool_by_name',
    'get_tools_by_category',
    'get_tools_statistics',
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
    'get_weather_n8n',
    'get_trade_results_n8n',
    'get_calendar_data_n8n',  # –ù–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    'search_web',
    'send_email',
    'send_notification_n8n',
]

# -------------------- –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ --------------------
if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    print("üõ†Ô∏è [N8N TOOLS] Package Information:")
    info = get_package_info()
    print(f"   üì¶ Package: {info['package']} v{info['version']}")
    print(f"   üîß Active tools: {info['active_tools']}")
    print(f"   ‚öóÔ∏è Development tools: {info['development_tools']}")
    print(f"   üìÇ Categories: {', '.join(info['categories'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if info.get('new_features'):
        print(f"   ‚ú® New features: {', '.join(info['new_features'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, tools in info['tools_by_category'].items():
        print(f"      üìÅ {category}: {', '.join(tools)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä [STATISTICS] Tools Statistics:")
    stats = get_tools_statistics()
    print(f"   üîß Total tools: {stats['total_tools']}")
    print(f"   üîó N8N tools: {stats['n8n_tools']}")
    print(f"   üåê Web tools: {stats['web_tools']}")
    print(f"   üìß Communication tools: {stats['communication_tools']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    async def run_quick_check():
        print("\n‚ö° [QUICK CHECK] Running quick tool validation...")
        results = await quick_tools_check()
        print(f"üìä [RESULTS] Quick check complete:")
        
        for tool_name, status in results.items():
            status_emoji = "‚úÖ" if status else "‚ùå"
            print(f"   {status_emoji} {tool_name}: {'Working' if status else 'Failed'}")
        
        working_count = sum(1 for status in results.values() if status)
        total_count = len(results)
        print(f"\nüìà [SUMMARY] {working_count}/{total_count} tools are working")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    async def run_full_validation():
        print("\nüß™ [TESTING] Running full tool validation...")
        results = await validate_all_tools()
        print(f"üìä [RESULTS] Validation complete:")
        print(f"   ‚úÖ Working: {results['summary']['working_tools']}")
        print(f"   ‚ùå Failed: {results['summary']['failed_tools']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º
        print("\nüìã [DETAILS] Module details:")
        if results.get('n8n_tools'):
            weather_status = results['n8n_tools'].get('weather_service', False)
            print(f"   üå§Ô∏è N8N Weather: {'‚úÖ Working' if weather_status else '‚ùå Failed'}")
            
        if results.get('n8n_trade_tools'):
            trade_status = results['n8n_trade_tools'].get('trade_analysis', False)
            print(f"   üìä N8N Trade: {'‚úÖ Working' if trade_status else '‚ùå Failed'}")
            
        if results.get('n8n_calendar_tools'):
            calendar_status = results['n8n_calendar_tools'].get('calendar_service', False)
            print(f"   üìÖ N8N Calendar: {'‚úÖ Working' if calendar_status else '‚ùå Failed'}")
            
        if results.get('web_tools'):
            web_status = results['web_tools'].get('search_web', False)
            print(f"   üîç Web Search: {'‚úÖ Working' if web_status else '‚ùå Failed'}")
            
        if results.get('email_tools'):
            email_status = results['email_tools'].get('send_email', False)
            print(f"   üìß Email Send: {'‚úÖ Working' if email_status else '‚ùå Failed'}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
    import sys
    if "--quick" in sys.argv:
        asyncio.run(run_quick_check())
    else:
        asyncio.run(run_full_validation())
else:
    # –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ - –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    initialize_tools()