#!/usr/bin/env python3
"""
Test script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Gemini Live –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import asyncio
from typing import Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(dotenv_path=".env")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç [ENV CHECK] Checking environment variables...")
    
    google_api_key = os.getenv("GOOGLE_API_KEY")
    if google_api_key:
        print(f"   ‚úÖ GOOGLE_API_KEY: {google_api_key[:8]}...")
    else:
        print("   ‚ùå GOOGLE_API_KEY: NOT SET")
        return False
    
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüîß [IMPORT CHECK] Testing imports...")
    
    try:
        import livekit.agents
        print(f"   ‚úÖ livekit.agents: {livekit.agents.__version__}")
    except ImportError as e:
        print(f"   ‚ùå livekit.agents: {e}")
        return False
    
    try:
        import livekit.plugins.google
        print(f"   ‚úÖ livekit.plugins.google: imported successfully")
    except ImportError as e:
        print(f"   ‚ùå livekit.plugins.google: {e}")
        return False
    
    try:
        from livekit.plugins.google.beta.realtime import RealtimeModel
        print(f"   ‚úÖ RealtimeModel: imported successfully")
    except ImportError as e:
        print(f"   ‚ùå RealtimeModel: {e}")
        return False
    
    try:
        from google import genai
        print(f"   ‚úÖ google.genai: imported successfully")
    except ImportError as e:
        print(f"   ‚ùå google.genai: {e}")
        return False
    
    return True

async def test_model_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("\nüéØ [MODEL TEST] Testing model creation...")
    
    try:
        from livekit.plugins.google.beta.realtime import RealtimeModel
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        test_models = [
            "gemini-live-2.5-flash-preview",
            "gemini-2.5-flash-preview-native-audio-dialog", 
            "gemini-2.0-flash-exp",
            "gemini-2.0-flash"
        ]
        
        google_api_key = os.getenv("GOOGLE_API_KEY")
        
        for model_name in test_models:
            try:
                model = RealtimeModel(
                    model=model_name,
                    voice="Aoede",
                    temperature=0.7,
                    api_key=google_api_key,
                )
                print(f"   ‚úÖ {model_name}: Model created successfully")
            except Exception as e:
                print(f"   ‚ùå {model_name}: {str(e)[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Model creation failed: {e}")
        return False

async def test_direct_genai():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google GenAI"""
    print("\nüåê [GENAI TEST] Testing direct Google GenAI connection...")
    
    try:
        from google import genai
        
        client = genai.Client()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        test_models = [
            "gemini-live-2.5-flash-preview",
            "gemini-2.5-flash-preview-native-audio-dialog",
            "gemini-2.0-flash-exp"
        ]
        
        for model_name in test_models:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                config = {"response_modalities": ["TEXT"]}
                
                print(f"   üß™ Testing {model_name}...")
                
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                # (–Ω–µ –±—É–¥–µ–º —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –∫–≤–æ—Ç—É)
                print(f"   ‚úÖ {model_name}: Configuration accepted")
                
            except Exception as e:
                print(f"   ‚ùå {model_name}: {str(e)[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå GenAI test failed: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ [GEMINI LIVE TEST] Starting comprehensive test...")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("\n‚ùå [RESULT] Environment check failed")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not check_imports():
        print("\n‚ùå [RESULT] Import check failed")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_ok = await test_model_creation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    genai_ok = await test_direct_genai()
    
    print("\n" + "=" * 70)
    
    if model_ok and genai_ok:
        print("‚úÖ [RESULT] All tests passed! Your setup supports Gemini Live API")
        print("\nüí° [RECOMMENDATION] You can use these models:")
        print("   ü•á gemini-live-2.5-flash-preview (recommended)")
        print("   ü•à gemini-2.5-flash-preview-native-audio-dialog (native audio)")
        print("   ü•â gemini-2.0-flash-exp (experimental)")
    else:
        print("‚ùå [RESULT] Some tests failed. Check versions and configuration.")
        print("\nüîß [FIX] Try running:")
        print("   pip install --upgrade livekit-agents livekit-plugins-google google-genai")
    
    return model_ok and genai_ok

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Test interrupted by user")
    except Exception as e:
        print(f"\nüí• [ERROR] Unexpected error: {e}")
        sys.exit(1)