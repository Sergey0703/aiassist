import asyncio
import logging
import os
from dotenv import load_dotenv
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    WorkerOptions,
    cli,
)
from livekit.plugins import google, silero

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from tools.n8n_tools import get_weather_n8n
from tools.n8n_trade_tools import get_trade_results_n8n
from tools.web_tools import search_web
from tools.email_tools import send_email

# -------------------- Setup --------------------
load_dotenv(dotenv_path=".env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("aiassist_gemini.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("gemini-realtime")

# -------------------- GOOGLE REALTIME MODEL SETUP --------------------
# üéØ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: Google Realtime Model = STT + LLM + TTS –≤ –æ–¥–Ω–æ–º!
# –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω API –∫–ª—é—á –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω—ã—Ö credentials

google_api_key = os.getenv("GOOGLE_API_KEY")
if not google_api_key:
    logger.error("GOOGLE_API_KEY not found in environment variables")
    print("‚ùå [SETUP] GOOGLE_API_KEY is required for Google Realtime Model")
    print("üí° [SETUP] Add GOOGLE_API_KEY=your_key to .env file")
    raise ValueError("GOOGLE_API_KEY is required")

logger.info("‚úÖ [SETUP] Google API key found")
print("‚úÖ [SETUP] Google API key configured")

# -------------------- GEMINI AGENT CLASS --------------------
class GeminiAgent(Agent):
    """–ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Realtime Model —Å N8N –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__(
            instructions="""
            You are a helpful voice assistant powered by Google Gemini Realtime Model.
            You can help with:
            - Weather information using get_weather_n8n tool
            - Trade analysis using get_trade_results_n8n tool  
            - Web search using search_web tool
            - Sending emails using send_email tool
            
            When users ask for information, use the appropriate tools and provide clear, concise responses.
            Be helpful and efficient in your responses.
            """,
            # ‚úÖ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –í AGENT - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê!
            tools=[get_weather_n8n, get_trade_results_n8n, search_web, send_email],
        )
        logger.info("‚úÖ [AGENT] GeminiAgent initialized with 4 tools: weather, trade, search, email")

# -------------------- EVENT HANDLERS --------------------
def setup_session_events(session: AgentSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    @session.on("user_input_transcribed")
    def on_user_transcribed(event):
        transcript = getattr(event, 'transcript', 'No transcript')
        is_final = getattr(event, 'is_final', False)
        if is_final:
            logger.info(f"üë§ [USER] {transcript}")
            print(f"üë§ [USER] {transcript}")
    
    @session.on("conversation_item_added")
    def on_conversation_item(event):
        item = getattr(event, 'item', None)
        if item:
            role = getattr(item, 'role', 'unknown')
            content = getattr(item, 'text_content', '') or str(getattr(item, 'content', ''))
            
            if role == "assistant":
                logger.info(f"ü§ñ [GEMINI] {content}")
                print(f"ü§ñ [GEMINI] {content}")
    
    # ================================
    # –°–û–ë–´–¢–ò–Ø –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê FUNCTION CALLING
    # ================================
    
    @session.on("function_call_started")
    def on_function_call_started(event):
        function_name = getattr(event, 'function_name', 'unknown')
        arguments = getattr(event, 'arguments', {})
        logger.info(f"üöÄ [FUNCTION STARTED] {function_name} with args: {arguments}")
        print(f"üöÄ [FUNCTION STARTED] {function_name}")
    
    @session.on("function_call_completed")
    def on_function_call_completed(event):
        function_name = getattr(event, 'function_name', 'unknown')
        result = getattr(event, 'result', 'no result')
        logger.info(f"‚úÖ [FUNCTION COMPLETED] {function_name} returned: {str(result)[:200]}...")
        print(f"‚úÖ [FUNCTION COMPLETED] {function_name}")
    
    @session.on("function_tools_executed")
    def on_function_tools_executed(event):
        logger.info("üõ†Ô∏è [TOOLS EXECUTED] Function tools completed")
        print("üõ†Ô∏è [TOOLS] Function executed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(event, 'function_call_outputs') and event.function_call_outputs:
            logger.info(f"‚úÖ [OUTPUTS] Found {len(event.function_call_outputs)} outputs")
            
            for i, output in enumerate(event.function_call_outputs):
                function_name = getattr(output, 'name', 'unknown')
                result_output = getattr(output, 'output', 'no output')
                
                logger.info(f"‚úÖ [OUTPUT {i+1}] {function_name}: {str(result_output)[:200]}...")
                print(f"‚úÖ [RESULT] {function_name}: {str(result_output)[:100]}...")
        else:
            logger.warning("‚ùå [OUTPUTS] No function_call_outputs found")
    
    @session.on("speech_created")
    def on_speech_created(event):
        logger.info("üîä [SPEECH] Gemini started speaking")
        print("üîä [SPEECH] Speaking...")
    
    @session.on("agent_state_changed")
    def on_agent_state(event):
        old_state = getattr(event, 'old_state', 'unknown')
        new_state = getattr(event, 'new_state', 'unknown')
        logger.info(f"‚ö° [STATE] {old_state} -> {new_state}")
        print(f"‚ö° [STATE] {old_state} -> {new_state}")
    
    @session.on("error")
    def on_error(event):
        error = getattr(event, 'error', str(event))
        logger.error(f"‚ùå [ERROR] {error}")
        print(f"‚ùå [ERROR] {error}")
    
    logger.info("‚úÖ [EVENTS] All event handlers configured")

# -------------------- MAIN ENTRYPOINT --------------------
async def entrypoint(ctx: JobContext):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - Google Realtime Model –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"""
    
    logger.info("üöÄ [GEMINI REALTIME] Starting with Google Realtime Model")
    print("üöÄ [GEMINI REALTIME] Starting...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    await ctx.connect()
    logger.info(f"‚úÖ [LIVEKIT] Connected to room: {ctx.room.name}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    agent = GeminiAgent()
    
    # ================================
    # GOOGLE REALTIME MODEL = STT + LLM + TTS –í –û–î–ù–û–ú!
    # ================================
    session = AgentSession(
        # VAD –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        vad=silero.VAD.load(),
        
        # Google Realtime Model - –í–°–Å –í –û–î–ù–û–ú –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ!
        llm=google.beta.realtime.RealtimeModel(
            model="gemini-2.0-flash-exp",  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å Gemini
            voice="Aoede",  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å - –∫—Ä–∞—Å–∏–≤—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
            temperature=0.7,
            api_key=google_api_key,
            # –ë–ï–ó tools –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –æ–Ω–∏ –≤ Agent!
        ),
        # –ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω—ã—Ö stt= –∏ tts= - –≤—Å—ë –≤ Realtime Model!
    )
    
    logger.info("‚úÖ [SESSION] Created with Google Realtime Model (STT+LLM+TTS)")
    print("‚úÖ [SESSION] Google Realtime Model ready")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    setup_session_events(session)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    await session.start(
        agent=agent,
        room=ctx.room,
    )
    
    logger.info("‚úÖ [GEMINI] Session started successfully")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try:
        await session.generate_reply(
            instructions="Greet the user and briefly mention you can help with weather, trade analysis, web search, and emails."
        )
        logger.info("‚úÖ [GREETING] Initial greeting generated")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è [GREETING] Could not generate greeting: {e}")
        print("ü§ñ [GEMINI] Hello! I'm your voice assistant. How can I help you today?")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    print("\n" + "="*80)
    print("ü§ñ [GEMINI REALTIME] Voice assistant ready!")
    print("üìã [ARCHITECTURE] Google Realtime Model (STT+LLM+TTS in one)")
    print("üõ†Ô∏è [TOOLS] Weather (N8N) | Trade Analysis (N8N) | Web Search | Email")
    print("üîë [AUTH] Simple Google API key (no complex credentials)")
    print("üéôÔ∏è [VOICE] Aoede voice with real-time speech")
    print("")
    print("üéØ [TEST COMMANDS]:")
    print("   ‚Ä¢ 'What's the weather in Dublin?'")
    print("   ‚Ä¢ 'Show me trade results for last 30 days'")
    print("   ‚Ä¢ 'Search for latest AI news'")
    print("   ‚Ä¢ 'Send email to test@example.com saying hello'")
    print("")
    print("üìä [COMPARISON vs old architecture]:")
    print("   ‚úÖ No separate STT/LLM/TTS components")
    print("   ‚úÖ No Google Cloud credentials complexity")
    print("   ‚úÖ Single API key instead of multiple auth")
    print("   ‚úÖ Built-in voice synthesis")
    print("   ‚úÖ Less HTTP sessions = less aiohttp issues")
    print("")
    print("üéÆ [CONTROLS] Speak into microphone | Press Q to quit")
    print("="*80 + "\n")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    try:
        logger.info("üéôÔ∏è [READY] Waiting for user input...")
        print("üéôÔ∏è [READY] Start speaking now...")
        
        while True:
            await asyncio.sleep(0.1)
            
    except KeyboardInterrupt:
        logger.info("üëã [SHUTDOWN] Gemini agent shutting down...")
        print("\nüëã [GEMINI] Goodbye!")

# -------------------- MAIN --------------------
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Gemini Realtime –∞–≥–µ–Ω—Ç–∞
    logger.info("üöÄ [MAIN] Starting Gemini Realtime Model agent")
    print("üöÄ [MAIN] Initializing Gemini Realtime Model...")
    
    cli.run_app(
        WorkerOptions(
            entrypoint_fnc=entrypoint
        )
    )