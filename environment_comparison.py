#!/usr/bin/env python3
"""
Environment Comparison Scripts
–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
"""

import sys
import subprocess
import json
import os
from pathlib import Path

# ==================== –°–ö–†–ò–ü–¢ 1: –≠–ö–°–ü–û–†–¢ –†–ê–ë–û–ß–ï–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø ====================
def export_working_environment():
    """
    –ó–ê–ü–£–°–¢–ò–¢–ï –≠–¢–û–¢ –°–ö–†–ò–ü–¢ –í –†–ê–ë–û–ß–ï–ú –û–ö–†–£–ñ–ï–ù–ò–ò
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
    """
    print("üîç [WORKING ENV EXPORT] Exporting working environment details...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "list", "--format=json"], 
                              capture_output=True, text=True, check=True)
        packages_json = json.loads(result.stdout)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º pip freeze (—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
        freeze_result = subprocess.run([sys.executable, "-m", "pip", "freeze"], 
                                     capture_output=True, text=True, check=True)
        
        # 3. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        env_info = {
            "python_version": sys.version,
            "python_executable": sys.executable,
            "virtual_env": os.environ.get('VIRTUAL_ENV', 'Not detected'),
            "site_packages": [p for p in sys.path if 'site-packages' in p],
            "packages_json": packages_json,
            "pip_freeze": freeze_result.stdout.split('\n'),
            "livekit_packages": [pkg for pkg in packages_json if 'livekit' in pkg['name'].lower()],
            "google_packages": [pkg for pkg in packages_json if 'google' in pkg['name'].lower()],
            "audio_packages": [pkg for pkg in packages_json if any(keyword in pkg['name'].lower() 
                              for keyword in ['audio', 'noise', 'sound', 'speech', 'voice'])],
        }
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("working_environment.json", "w", encoding='utf-8') as f:
            json.dump(env_info, f, indent=2, ensure_ascii=False)
        
        # 5. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π requirements.txt
        with open("working_requirements.txt", "w", encoding='utf-8') as f:
            f.write(freeze_result.stdout)
        
        print("‚úÖ [EXPORT SUCCESS] Files created:")
        print("   üìÑ working_environment.json - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print("   üìÑ working_requirements.txt - —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è pip install")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
        print("\nüîß [KEY PACKAGES in working environment]:")
        for pkg in env_info['livekit_packages']:
            print(f"   ‚úÖ {pkg['name']:<35} {pkg['version']}")
        
        print("\nü§ñ [GOOGLE PACKAGES in working environment]:")
        for pkg in env_info['google_packages']:
            print(f"   ‚úÖ {pkg['name']:<35} {pkg['version']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå [EXPORT ERROR] {e}")
        return False

# ==================== –°–ö–†–ò–ü–¢ 2: –°–†–ê–í–ù–ï–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–ô ====================
def compare_environments():
    """
    –ó–ê–ü–£–°–¢–ò–¢–ï –≠–¢–û–¢ –°–ö–†–ò–ü–¢ –í –¢–ï–ö–£–©–ï–ú –û–ö–†–£–ñ–ï–ù–ò–ò
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
    """
    print("üîç [ENVIRONMENT COMPARISON] Comparing environments...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not Path("working_environment.json").exists():
        print("‚ùå [ERROR] working_environment.json not found!")
        print("üí° [SOLUTION] Run export_working_environment() in your working environment first")
        return False
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        with open("working_environment.json", "r", encoding='utf-8') as f:
            working_env = json.load(f)
    except Exception as e:
        print(f"‚ùå [ERROR] Failed to load working environment: {e}")
        return False
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "list", "--format=json"], 
                              capture_output=True, text=True, check=True)
        current_packages = json.loads(result.stdout)
        current_dict = {pkg['name'].lower(): pkg['version'] for pkg in current_packages}
        
    except Exception as e:
        print(f"‚ùå [ERROR] Failed to get current environment: {e}")
        return False
    
    # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    working_dict = {pkg['name'].lower(): pkg['version'] for pkg in working_env['packages_json']}
    
    missing_packages = []
    version_differences = []
    
    for pkg_name, version in working_dict.items():
        if pkg_name not in current_dict:
            missing_packages.append((pkg_name, version))
        elif current_dict[pkg_name] != version:
            version_differences.append((pkg_name, current_dict[pkg_name], version))
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä [COMPARISON RESULTS]:")
    print(f"   Working environment: {len(working_dict)} packages")
    print(f"   Current environment: {len(current_dict)} packages")
    print(f"   Missing packages: {len(missing_packages)}")
    print(f"   Version differences: {len(version_differences)}")
    
    if missing_packages:
        print(f"\n‚ùå [MISSING PACKAGES] ({len(missing_packages)} packages):")
        for name, version in missing_packages:
            print(f"   üì¶ {name}=={version}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        missing_list = [f"{name}=={version}" for name, version in missing_packages]
        install_command = f"pip install {' '.join(missing_list)}"
        
        print(f"\nüöÄ [INSTALL COMMAND]:")
        print(f"pip install \\")
        for i, pkg in enumerate(missing_list):
            if i == len(missing_list) - 1:
                print(f"  {pkg}")
            else:
                print(f"  {pkg} \\")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª
        with open("install_missing.bat", "w") as f:
            f.write(install_command)
        
        print(f"\nüíæ [SAVED] Install command saved to: install_missing.bat")
    
    if version_differences:
        print(f"\n‚ö†Ô∏è [VERSION DIFFERENCES] ({len(version_differences)} packages):")
        for name, current_ver, working_ver in version_differences:
            print(f"   üì¶ {name:<30} current: {current_ver:<10} working: {working_ver}")
    
    if not missing_packages and not version_differences:
        print(f"\n‚úÖ [PERFECT MATCH] Environments are identical!")
    
    return True

# ==================== –°–ö–†–ò–ü–¢ 3: –§–û–ö–£–° –ù–ê LIVEKIT ====================
def focus_on_livekit():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ LiveKit –ø–∞–∫–µ—Ç–æ–≤"""
    print("üîß [LIVEKIT FOCUS] Comparing LiveKit packages specifically...")
    
    if not Path("working_environment.json").exists():
        print("‚ùå [ERROR] working_environment.json not found!")
        return False
    
    with open("working_environment.json", "r", encoding='utf-8') as f:
        working_env = json.load(f)
    
    # –¢–µ–∫—É—â–∏–µ LiveKit –ø–∞–∫–µ—Ç—ã
    result = subprocess.run([sys.executable, "-m", "pip", "list", "--format=json"], 
                          capture_output=True, text=True, check=True)
    current_packages = json.loads(result.stdout)
    current_livekit = [pkg for pkg in current_packages if 'livekit' in pkg['name'].lower()]
    
    # –†–∞–±–æ—á–∏–µ LiveKit –ø–∞–∫–µ—Ç—ã
    working_livekit = working_env['livekit_packages']
    
    print("\nüîß [WORKING ENVIRONMENT - LIVEKIT]:")
    for pkg in working_livekit:
        print(f"   ‚úÖ {pkg['name']:<35} {pkg['version']}")
    
    print("\nüîß [CURRENT ENVIRONMENT - LIVEKIT]:")
    for pkg in current_livekit:
        print(f"   ‚úÖ {pkg['name']:<35} {pkg['version']}")
    
    # –ù–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ LiveKit –ø–∞–∫–µ—Ç—ã
    working_names = {pkg['name'].lower() for pkg in working_livekit}
    current_names = {pkg['name'].lower() for pkg in current_livekit}
    
    missing_livekit = working_names - current_names
    
    if missing_livekit:
        print(f"\n‚ùå [MISSING LIVEKIT PACKAGES]:")
        for pkg_name in missing_livekit:
            # –ù–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é
            for pkg in working_livekit:
                if pkg['name'].lower() == pkg_name:
                    print(f"   üì¶ pip install {pkg['name']}=={pkg['version']}")
                    break
    else:
        print(f"\n‚úÖ [ALL LIVEKIT PACKAGES PRESENT]")

# ==================== MAIN FUNCTIONS ====================
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é"""
    print("üîç [ENVIRONMENT COMPARISON TOOL]")
    print("=" * 60)
    print("1. Export working environment (run in WORKING env)")
    print("2. Compare environments (run in CURRENT env)")  
    print("3. Focus on LiveKit packages")
    print("4. Quick export (working env)")
    print("=" * 60)
    
    if len(sys.argv) > 1:
        choice = sys.argv[1]
    else:
        choice = input("Enter choice (1-4): ").strip()
    
    if choice == "1":
        export_working_environment()
    elif choice == "2":
        compare_environments()
    elif choice == "3":
        focus_on_livekit()
    elif choice == "4":
        # –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        result = subprocess.run([sys.executable, "-m", "pip", "freeze"], 
                              capture_output=True, text=True, check=True)
        with open("working_requirements.txt", "w") as f:
            f.write(result.stdout)
        print("‚úÖ [QUICK EXPORT] Saved to working_requirements.txt")
    else:
        print("‚ùå Invalid choice")

if __name__ == "__main__":
    main()

# ==================== –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ ====================
"""
üéØ [USAGE INSTRUCTIONS]:

–®–ê–ì–ò:
1. –í –†–ê–ë–û–ß–ï–ú –æ–∫—Ä—É–∂–µ–Ω–∏–∏:
   python environment_comparison.py 1
   
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã working_environment.json –∏ working_requirements.txt
   –≤ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

3. –í –¢–ï–ö–£–©–ï–ú –æ–∫—Ä—É–∂–µ–Ω–∏–∏:
   python environment_comparison.py 2
   
4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û (–±—ã—Å—Ç—Ä–æ):
1. –í —Ä–∞–±–æ—á–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: pip freeze > working.txt
2. –í —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: pip install -r working.txt
"""